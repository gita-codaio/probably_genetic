{"version":3,"sources":["logo.svg","Components/Form.js","axios.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","state","value","onSubmit","this","props","handleSubmit","onChange","handleChange","bind","type","React","Component","instance","axios","create","baseURL","CancelToken","isCancel","withCredentials","App","disorders","event","preventDefault","csrftoken","Cookies","get","post","data","headers","common","then","response","setState","catch","error","console","log","target","view","Object","keys","map","disorderkey","disorders__name","length","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,4ICmB5BC,G,uNAjBbC,MAAQ,CACJC,MAAO,W,wEAIX,OACE,0BAAMC,SAAUC,KAAKC,MAAMC,cACzB,iDAEE,8BAAUJ,MAAOE,KAAKC,MAAMH,MAC5BK,SAAUH,KAAKC,MAAMG,aAAaC,KAAKL,SAEzC,2BAAOM,KAAK,SAASR,MAAM,gB,GAbdS,IAAMC,Y,gBCEnBC,EAAWC,IAAMC,OAAO,CAC5BC,QAHmB,2BAKrBH,EAASI,YAAcH,IAAMG,YAC7BJ,EAASK,SAAWJ,IAAMI,SAC1BL,EAASM,iBAAkB,EACZN,Q,iBCiDAO,E,2MAlDbnB,MAAQ,CACNC,MAAO,UACPmB,UAAW,M,4EAEAC,GAAQ,IAAD,OAClBA,EAAMC,iBACN,IAAIC,EAAYC,IAAQC,IAAI,aAC5BZ,EAAMa,KAAK,sBAAuB,CAACC,KAAOxB,KAAKH,MAAMC,OACrD,CAAC2B,QAAS,CACRC,OAAQ,CACN,eAAgBN,MAGnBO,MAAK,SAAAC,GAAQ,OAAIA,KACjBD,MAAK,SAAAH,GACJ,EAAKK,SAAS,CACZZ,UAAWO,EAAKA,UAGnBM,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,mCAGjBb,GACXlB,KAAK6B,SAAS,CAAE/B,MAAOoB,EAAMgB,OAAOpC,U,+BAG5B,IAAD,OACHqC,EAAQ,KAUZ,OATKnC,KAAKH,MAAMoB,aACZkB,EAAOC,OAAOC,KAAKrC,KAAKH,MAAMoB,WAAWqB,KAAI,SAAAC,GAC3C,OAAO,4BAAK,EAAK1C,MAAMoB,UAAUsB,GAAaC,qBAEtCC,SACRN,EAAO,4CAKX,yBAAKO,UAAU,OACb,kBAAC,EAAD,CACE5C,MAAOE,KAAKH,MAAMC,MAClBI,aAAcF,KAAKE,aAAaG,KAAKL,MACrCI,aAAcJ,KAAKI,aAAaC,KAAKL,QAEtCmC,O,GA7CS3B,aCKEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0B,c","file":"static/js/main.301237e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nclass Form extends React.Component {\n  state = {\n      value: 'Obesity'\n    }\n\n  render() {\n  return (\n    <form onSubmit={this.props.handleSubmit}>\n      <label>\n        Enter Symptoms:\n        <textarea value={this.props.value}\n        onChange={this.props.handleChange.bind(this)} />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n  }\n}\nexport default Form;\n","import axios from 'axios';\nconst API_ENDPOINT = 'http://localhost:8000/' \n\nconst instance = axios.create({\n  baseURL: API_ENDPOINT\n});\ninstance.CancelToken = axios.CancelToken;\ninstance.isCancel = axios.isCancel;\ninstance.withCredentials = true\nexport default instance\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Form from \"./Components/Form\";\nimport axios from \"./axios\";\nimport Cookies from 'js-cookie'\n\nclass App extends Component {\n  state = {\n    value: \"Obesity\",\n    disorders: null\n  };\n  handleSubmit(event) {\n    event.preventDefault();\n    var csrftoken = Cookies.get('csrftoken');\n    axios.post('server/api/v1/forms', {data : this.state.value},\n    {headers: {\n      common: {\n        'X-CSRF-Token': csrftoken\n      }\n    }})\n    .then(response => response)\n    .then(data => {\n      this.setState({\n        disorders: data.data\n      })\n    })\n    .catch(error => console.log(error));\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  render() {\n    let view  = null\n    if  (this.state.disorders){\n        view = Object.keys(this.state.disorders).map(disorderkey => {\n          return <h4>{this.state.disorders[disorderkey].disorders__name}</h4>\n        })\n        if (!view.length){\n          view = <h3>No results</h3>\n        }\n      }\n\n    return (\n      <div className=\"App\">\n        <Form\n          value={this.state.value}\n          handleSubmit={this.handleSubmit.bind(this)}\n          handleChange={this.handleChange.bind(this)}\n        />\n        {view}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}